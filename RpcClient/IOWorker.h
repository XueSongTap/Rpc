#ifndef _IOWORKER_H_
#define _IOWORKER_H_

#include "RpcClientGlobal.h"

/************************************************************************
功  能：libevent 描述符可读后回调此函数
参  数：见libevent event_callback_fn描述
返回值：无
************************************************************************/
void notifiedCallback(evutil_socket_t fd, short events, void *pArg);

/************************************************************************
功  能：libevent bufferevent输入缓冲区可读后回调此函数
参  数：见libevent bufferevent_data_cb描述
返回值：无
************************************************************************/
void readCallback(bufferevent *pBufEv, void *pArg);

/************************************************************************
功  能：libevent bufferevent上发生可读、可写之外的事件后回调此函数
参  数：见libevent bufferevent_event_cb描述
返回值：无
************************************************************************/
void eventCallback(bufferevent *pBufEv, short events, void *pArg);

//IOWorker，包含一个线程，事件循环运行在线程中
class IOWorker
{
public:
	/************************************************************************
	功  能：构造方法
	参  数：
		fds：输入，IOWorker对应的socketpair
		queueMaxSize：输入，队列最大长度
		heartbeatInterval：输入，连接上PING心跳的发送周期
	返回值：无
	************************************************************************/
	IOWorker(evutil_socket_t *fds, unsigned int queueMaxSize, timeval heartbeatInterval);

	/************************************************************************
	功  能：析构方法
	参  数：无
	返回值：无
	************************************************************************/
	~IOWorker();

	/************************************************************************
	功  能：启动IOWorker
	参  数：无
	返回值：无
	************************************************************************/
	void start();

	/************************************************************************
	功  能：处理IO任务通知，IO任务放在IOWorker队列中
	参  数：无
	返回值：无
	************************************************************************/
	void handleIOTask();

	/************************************************************************
	功  能：处理结束通知
	参  数：无
	返回值：无
	************************************************************************/
	void handleEnd();

	/************************************************************************
	功  能：处理bufferevent输入缓冲区数据
	参  数：
		pConn：输入，连接指针
	返回值：无
	************************************************************************/
	void handleRead(Conn *pConn);

	/************************************************************************
	功  能：处理bufferevent的连接成功事件
	参  数：
		pConn：输入，连接指针
	返回值：无
	************************************************************************/
	void handleConnected(Conn *pConn);

	/************************************************************************
	功  能：处理bufferevent的超时事件
	参  数：
		pConn：输入，连接指针
	返回值：无
	************************************************************************/
	void handleTimeout(Conn *pConn);

	/************************************************************************
	功  能：发起连接
	参  数：
		pConn：输入，连接指针
	返回值：
		true：连接成功
		false：连接失败
	************************************************************************/
	bool connect(Conn *pConn);

	/************************************************************************
	功  能：释放连接
	参  数：
		pConn：输入，连接指针
	返回值：无
	************************************************************************/
	void freeConn(Conn *pConn);

	/************************************************************************
	功  能：获取IOWorker的繁忙程度，以当前IOWorker m_mapConn的size表示繁忙程度
	参  数：无
	返回值：IOWorker的繁忙程度
	************************************************************************/
	unsigned int getBusyLevel();

	/************************************************************************
	功  能：获取IOWorker的socketpair的写端描述符
	参  数：无
	返回值：IOWorker的socketpair的写端描述符
	************************************************************************/
	evutil_socket_t getNotify_fd();

	/************************************************************************
	功  能：生成连接
	参  数：无
	返回值：Conn指针，若生成失败（连接id不够），返回NULL
	************************************************************************/
	Conn *genConn();

	//队列，用于放置IO任务
	SyncQueue<IOTask> m_queue;

private:
	/************************************************************************
	功  能：线程主方法
	参  数：无
	返回值：无
	************************************************************************/
	void threadMain(evutil_socket_t notified_fd);

	/************************************************************************
	功  能：处理断开连接的任务
	参  数：
		connId：输入，连接id
	返回值：无
	************************************************************************/
	void handleDisconnect(unsigned int connId);

	/************************************************************************
	功  能：处理调用的任务
	参  数：
		pCall：输入，调用指针
	返回值：无
	************************************************************************/
	void handleCall(Call *pCall);

	/************************************************************************
	功  能：rpc回调
	参  数：
		pClosure：输入，用于回调用户函数的Closure指针
		sync_write_fd：输入，用于同步调用的socketpair写端描述符
	返回值：无
	************************************************************************/
	void rpcCallback(google::protobuf::Closure *pClosure, evutil_socket_t sync_write_fd);

	//线程
	boost::thread m_thd;
	//socketpair读端描述符
	evutil_socket_t m_notified_fd;
	//socketpair写端描述符
	evutil_socket_t m_notify_fd;
	//唯一连接id生成器
	UniqueIdGenerator<unsigned int> m_connIdGen;
	//所有连接：map<连接id, 连接指针>
	map<unsigned int, Conn *> m_mapConn;
	//event_base指针
	event_base *m_pEvBase;
	//连接上PING心跳的发送周期
	timeval m_heartbeatInterval;
	//IOWorker是否已经开始启动
	bool m_bStarted;
	//IOWorker是否已经开始结束
	bool m_bEnded;
};

#endif